// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  tokens    Token[]
  myMemes   Meme[]
  likes     Like[]

  // Following and Followers
  followedBy Follows[] @relation("following")
  following  Follows[] @relation("followedBy")

  // Notifications
  notifications Notification[]

  sentNotifications Notification[] @relation("fromUser")
}

enum NotificationType {
  LIKE
  FOLLOW
}

model Notification {
  id   Int              @id @default(autoincrement())
  type NotificationType

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  fromUserId Int
  fromUser   User @relation("fromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  memeId Int?

  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Follows {
  followedBy   User @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedById Int
  following    User @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId  Int

  @@id([followingId, followedById])
}

model Token {
  id        Int    @id @default(autoincrement())
  token     String @unique
  userId    Int
  pushToken String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  USER
  ADMIN
}

model Meme {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageName   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes       Like[]
  likesCount  Int      @default(0)
}

model Like {
  userId    Int
  memeId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  meme      Meme     @relation(fields: [memeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, memeId])
}
